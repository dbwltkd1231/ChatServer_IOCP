// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGEWRAPPER_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_MESSAGEWRAPPER_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace protocol {

struct REQUEST_CONNECT;
struct REQUEST_CONNECTBuilder;

struct RESPONSE_CONNECT;
struct RESPONSE_CONNECTBuilder;

struct REQUEST_LOGIN;
struct REQUEST_LOGINBuilder;

struct RESPONSE_LOGIN;
struct RESPONSE_LOGINBuilder;

struct REQUEST_CREATE_ACCOUNT;
struct REQUEST_CREATE_ACCOUNTBuilder;

struct RESPONSE_CREATE_ACCOUNT;
struct RESPONSE_CREATE_ACCOUNTBuilder;

struct REQUEST_LOGOUT;
struct REQUEST_LOGOUTBuilder;

struct RESPONSE_LOGOUT;
struct RESPONSE_LOGOUTBuilder;

struct MESSAGE_WRAPPER;
struct MESSAGE_WRAPPERBuilder;

enum MESSAGETYPE : int32_t {
  MESSAGETYPE_BEGIN = 0,
  MESSAGETYPE_REQUEST_CONNECT = 1,
  MESSAGETYPE_RESPONSE_CONNECT = 2,
  MESSAGETYPE_REQUEST_LOGIN = 3,
  MESSAGETYPE_RESPONSE_LOGIN = 4,
  MESSAGETYPE_REQUEST_CREATE_ACCOUNT = 5,
  MESSAGETYPE_RESPONSE_CREATE_ACCOUNT = 6,
  MESSAGETYPE_REQUEST_LOGOUT = 7,
  MESSAGETYPE_RESPONSE_LOGOUT = 8,
  MESSAGETYPE_END = 9,
  MESSAGETYPE_MIN = MESSAGETYPE_BEGIN,
  MESSAGETYPE_MAX = MESSAGETYPE_END
};

inline const MESSAGETYPE (&EnumValuesMESSAGETYPE())[10] {
  static const MESSAGETYPE values[] = {
    MESSAGETYPE_BEGIN,
    MESSAGETYPE_REQUEST_CONNECT,
    MESSAGETYPE_RESPONSE_CONNECT,
    MESSAGETYPE_REQUEST_LOGIN,
    MESSAGETYPE_RESPONSE_LOGIN,
    MESSAGETYPE_REQUEST_CREATE_ACCOUNT,
    MESSAGETYPE_RESPONSE_CREATE_ACCOUNT,
    MESSAGETYPE_REQUEST_LOGOUT,
    MESSAGETYPE_RESPONSE_LOGOUT,
    MESSAGETYPE_END
  };
  return values;
}

inline const char * const *EnumNamesMESSAGETYPE() {
  static const char * const names[11] = {
    "BEGIN",
    "REQUEST_CONNECT",
    "RESPONSE_CONNECT",
    "REQUEST_LOGIN",
    "RESPONSE_LOGIN",
    "REQUEST_CREATE_ACCOUNT",
    "RESPONSE_CREATE_ACCOUNT",
    "REQUEST_LOGOUT",
    "RESPONSE_LOGOUT",
    "END",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGETYPE(MESSAGETYPE e) {
  if (::flatbuffers::IsOutRange(e, MESSAGETYPE_BEGIN, MESSAGETYPE_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMESSAGETYPE()[index];
}

enum MessageContent : uint8_t {
  MessageContent_NONE = 0,
  MessageContent_REQUEST_CONNECT = 1,
  MessageContent_RESPONSE_CONNECT = 2,
  MessageContent_REQUEST_LOGIN = 3,
  MessageContent_RESPONSE_LOGIN = 4,
  MessageContent_REQUEST_CREATE_ACCOUNT = 5,
  MessageContent_RESPONSE_CREATE_ACCOUNT = 6,
  MessageContent_REQUEST_LOGOUT = 7,
  MessageContent_RESPONSE_LOGOUT = 8,
  MessageContent_MIN = MessageContent_NONE,
  MessageContent_MAX = MessageContent_RESPONSE_LOGOUT
};

inline const MessageContent (&EnumValuesMessageContent())[9] {
  static const MessageContent values[] = {
    MessageContent_NONE,
    MessageContent_REQUEST_CONNECT,
    MessageContent_RESPONSE_CONNECT,
    MessageContent_REQUEST_LOGIN,
    MessageContent_RESPONSE_LOGIN,
    MessageContent_REQUEST_CREATE_ACCOUNT,
    MessageContent_RESPONSE_CREATE_ACCOUNT,
    MessageContent_REQUEST_LOGOUT,
    MessageContent_RESPONSE_LOGOUT
  };
  return values;
}

inline const char * const *EnumNamesMessageContent() {
  static const char * const names[10] = {
    "NONE",
    "REQUEST_CONNECT",
    "RESPONSE_CONNECT",
    "REQUEST_LOGIN",
    "RESPONSE_LOGIN",
    "REQUEST_CREATE_ACCOUNT",
    "RESPONSE_CREATE_ACCOUNT",
    "REQUEST_LOGOUT",
    "RESPONSE_LOGOUT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageContent(MessageContent e) {
  if (::flatbuffers::IsOutRange(e, MessageContent_NONE, MessageContent_RESPONSE_LOGOUT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageContent()[index];
}

template<typename T> struct MessageContentTraits {
  static const MessageContent enum_value = MessageContent_NONE;
};

template<> struct MessageContentTraits<protocol::REQUEST_CONNECT> {
  static const MessageContent enum_value = MessageContent_REQUEST_CONNECT;
};

template<> struct MessageContentTraits<protocol::RESPONSE_CONNECT> {
  static const MessageContent enum_value = MessageContent_RESPONSE_CONNECT;
};

template<> struct MessageContentTraits<protocol::REQUEST_LOGIN> {
  static const MessageContent enum_value = MessageContent_REQUEST_LOGIN;
};

template<> struct MessageContentTraits<protocol::RESPONSE_LOGIN> {
  static const MessageContent enum_value = MessageContent_RESPONSE_LOGIN;
};

template<> struct MessageContentTraits<protocol::REQUEST_CREATE_ACCOUNT> {
  static const MessageContent enum_value = MessageContent_REQUEST_CREATE_ACCOUNT;
};

template<> struct MessageContentTraits<protocol::RESPONSE_CREATE_ACCOUNT> {
  static const MessageContent enum_value = MessageContent_RESPONSE_CREATE_ACCOUNT;
};

template<> struct MessageContentTraits<protocol::REQUEST_LOGOUT> {
  static const MessageContent enum_value = MessageContent_REQUEST_LOGOUT;
};

template<> struct MessageContentTraits<protocol::RESPONSE_LOGOUT> {
  static const MessageContent enum_value = MessageContent_RESPONSE_LOGOUT;
};

bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type);
bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct REQUEST_CONNECT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_CONNECTBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct REQUEST_CONNECTBuilder {
  typedef REQUEST_CONNECT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit REQUEST_CONNECTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_CONNECT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_CONNECT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_CONNECT> CreateREQUEST_CONNECT(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  REQUEST_CONNECTBuilder builder_(_fbb);
  return builder_.Finish();
}

struct RESPONSE_CONNECT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_CONNECTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_CONNECTBuilder {
  typedef RESPONSE_CONNECT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(RESPONSE_CONNECT::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit RESPONSE_CONNECTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_CONNECT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_CONNECT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_CONNECT> CreateRESPONSE_CONNECT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  RESPONSE_CONNECTBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct REQUEST_LOGIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct REQUEST_LOGINBuilder {
  typedef REQUEST_LOGIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(REQUEST_LOGIN::VT_USER_ID, user_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(REQUEST_LOGIN::VT_PASSWORD, password);
  }
  explicit REQUEST_LOGINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_LOGIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_LOGIN> CreateREQUEST_LOGIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  REQUEST_LOGINBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_LOGIN> CreateREQUEST_LOGINDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    const char *password = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return protocol::CreateREQUEST_LOGIN(
      _fbb,
      user_id__,
      password__);
}

struct RESPONSE_LOGIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_FEEDBACK = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_LOGINBuilder {
  typedef RESPONSE_LOGIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(RESPONSE_LOGIN::VT_USER_ID, user_id);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_LOGIN::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_LOGINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_LOGIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_LOGIN> CreateRESPONSE_LOGIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    bool feedback = false) {
  RESPONSE_LOGINBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RESPONSE_LOGIN> CreateRESPONSE_LOGINDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    bool feedback = false) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  return protocol::CreateRESPONSE_LOGIN(
      _fbb,
      user_id__,
      feedback);
}

struct REQUEST_CREATE_ACCOUNT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_CREATE_ACCOUNTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct REQUEST_CREATE_ACCOUNTBuilder {
  typedef REQUEST_CREATE_ACCOUNT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(REQUEST_CREATE_ACCOUNT::VT_USER_ID, user_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(REQUEST_CREATE_ACCOUNT::VT_PASSWORD, password);
  }
  explicit REQUEST_CREATE_ACCOUNTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_CREATE_ACCOUNT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_CREATE_ACCOUNT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_CREATE_ACCOUNT> CreateREQUEST_CREATE_ACCOUNT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  REQUEST_CREATE_ACCOUNTBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_CREATE_ACCOUNT> CreateREQUEST_CREATE_ACCOUNTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    const char *password = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return protocol::CreateREQUEST_CREATE_ACCOUNT(
      _fbb,
      user_id__,
      password__);
}

struct RESPONSE_CREATE_ACCOUNT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_CREATE_ACCOUNTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_FEEDBACK = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_CREATE_ACCOUNTBuilder {
  typedef RESPONSE_CREATE_ACCOUNT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(RESPONSE_CREATE_ACCOUNT::VT_USER_ID, user_id);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_CREATE_ACCOUNT::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_CREATE_ACCOUNTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_CREATE_ACCOUNT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_CREATE_ACCOUNT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_CREATE_ACCOUNT> CreateRESPONSE_CREATE_ACCOUNT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    bool feedback = false) {
  RESPONSE_CREATE_ACCOUNTBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RESPONSE_CREATE_ACCOUNT> CreateRESPONSE_CREATE_ACCOUNTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    bool feedback = false) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  return protocol::CreateRESPONSE_CREATE_ACCOUNT(
      _fbb,
      user_id__,
      feedback);
}

struct REQUEST_LOGOUT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_LOGOUTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct REQUEST_LOGOUTBuilder {
  typedef REQUEST_LOGOUT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(REQUEST_LOGOUT::VT_USER_ID, user_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(REQUEST_LOGOUT::VT_PASSWORD, password);
  }
  explicit REQUEST_LOGOUTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_LOGOUT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_LOGOUT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_LOGOUT> CreateREQUEST_LOGOUT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  REQUEST_LOGOUTBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_LOGOUT> CreateREQUEST_LOGOUTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    const char *password = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return protocol::CreateREQUEST_LOGOUT(
      _fbb,
      user_id__,
      password__);
}

struct RESPONSE_LOGOUT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_LOGOUTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_FEEDBACK = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_LOGOUTBuilder {
  typedef RESPONSE_LOGOUT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(RESPONSE_LOGOUT::VT_USER_ID, user_id);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_LOGOUT::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_LOGOUTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_LOGOUT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_LOGOUT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_LOGOUT> CreateRESPONSE_LOGOUT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    bool feedback = false) {
  RESPONSE_LOGOUTBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RESPONSE_LOGOUT> CreateRESPONSE_LOGOUTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    bool feedback = false) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  return protocol::CreateRESPONSE_LOGOUT(
      _fbb,
      user_id__,
      feedback);
}

struct MESSAGE_WRAPPER FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MESSAGE_WRAPPERBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_CONTENT_TYPE = 6,
    VT_CONTENT = 8
  };
  protocol::MESSAGETYPE message_type() const {
    return static_cast<protocol::MESSAGETYPE>(GetField<int32_t>(VT_MESSAGE_TYPE, 0));
  }
  protocol::MessageContent content_type() const {
    return static_cast<protocol::MessageContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const protocol::REQUEST_CONNECT *content_as_REQUEST_CONNECT() const {
    return content_type() == protocol::MessageContent_REQUEST_CONNECT ? static_cast<const protocol::REQUEST_CONNECT *>(content()) : nullptr;
  }
  const protocol::RESPONSE_CONNECT *content_as_RESPONSE_CONNECT() const {
    return content_type() == protocol::MessageContent_RESPONSE_CONNECT ? static_cast<const protocol::RESPONSE_CONNECT *>(content()) : nullptr;
  }
  const protocol::REQUEST_LOGIN *content_as_REQUEST_LOGIN() const {
    return content_type() == protocol::MessageContent_REQUEST_LOGIN ? static_cast<const protocol::REQUEST_LOGIN *>(content()) : nullptr;
  }
  const protocol::RESPONSE_LOGIN *content_as_RESPONSE_LOGIN() const {
    return content_type() == protocol::MessageContent_RESPONSE_LOGIN ? static_cast<const protocol::RESPONSE_LOGIN *>(content()) : nullptr;
  }
  const protocol::REQUEST_CREATE_ACCOUNT *content_as_REQUEST_CREATE_ACCOUNT() const {
    return content_type() == protocol::MessageContent_REQUEST_CREATE_ACCOUNT ? static_cast<const protocol::REQUEST_CREATE_ACCOUNT *>(content()) : nullptr;
  }
  const protocol::RESPONSE_CREATE_ACCOUNT *content_as_RESPONSE_CREATE_ACCOUNT() const {
    return content_type() == protocol::MessageContent_RESPONSE_CREATE_ACCOUNT ? static_cast<const protocol::RESPONSE_CREATE_ACCOUNT *>(content()) : nullptr;
  }
  const protocol::REQUEST_LOGOUT *content_as_REQUEST_LOGOUT() const {
    return content_type() == protocol::MessageContent_REQUEST_LOGOUT ? static_cast<const protocol::REQUEST_LOGOUT *>(content()) : nullptr;
  }
  const protocol::RESPONSE_LOGOUT *content_as_RESPONSE_LOGOUT() const {
    return content_type() == protocol::MessageContent_RESPONSE_LOGOUT ? static_cast<const protocol::RESPONSE_LOGOUT *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MESSAGE_TYPE, 4) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyMessageContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const protocol::REQUEST_CONNECT *MESSAGE_WRAPPER::content_as<protocol::REQUEST_CONNECT>() const {
  return content_as_REQUEST_CONNECT();
}

template<> inline const protocol::RESPONSE_CONNECT *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_CONNECT>() const {
  return content_as_RESPONSE_CONNECT();
}

template<> inline const protocol::REQUEST_LOGIN *MESSAGE_WRAPPER::content_as<protocol::REQUEST_LOGIN>() const {
  return content_as_REQUEST_LOGIN();
}

template<> inline const protocol::RESPONSE_LOGIN *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_LOGIN>() const {
  return content_as_RESPONSE_LOGIN();
}

template<> inline const protocol::REQUEST_CREATE_ACCOUNT *MESSAGE_WRAPPER::content_as<protocol::REQUEST_CREATE_ACCOUNT>() const {
  return content_as_REQUEST_CREATE_ACCOUNT();
}

template<> inline const protocol::RESPONSE_CREATE_ACCOUNT *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_CREATE_ACCOUNT>() const {
  return content_as_RESPONSE_CREATE_ACCOUNT();
}

template<> inline const protocol::REQUEST_LOGOUT *MESSAGE_WRAPPER::content_as<protocol::REQUEST_LOGOUT>() const {
  return content_as_REQUEST_LOGOUT();
}

template<> inline const protocol::RESPONSE_LOGOUT *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_LOGOUT>() const {
  return content_as_RESPONSE_LOGOUT();
}

struct MESSAGE_WRAPPERBuilder {
  typedef MESSAGE_WRAPPER Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(protocol::MESSAGETYPE message_type) {
    fbb_.AddElement<int32_t>(MESSAGE_WRAPPER::VT_MESSAGE_TYPE, static_cast<int32_t>(message_type), 0);
  }
  void add_content_type(protocol::MessageContent content_type) {
    fbb_.AddElement<uint8_t>(MESSAGE_WRAPPER::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(MESSAGE_WRAPPER::VT_CONTENT, content);
  }
  explicit MESSAGE_WRAPPERBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MESSAGE_WRAPPER> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MESSAGE_WRAPPER>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MESSAGE_WRAPPER> CreateMESSAGE_WRAPPER(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    protocol::MESSAGETYPE message_type = protocol::MESSAGETYPE_BEGIN,
    protocol::MessageContent content_type = protocol::MessageContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  MESSAGE_WRAPPERBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_message_type(message_type);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type) {
  switch (type) {
    case MessageContent_NONE: {
      return true;
    }
    case MessageContent_REQUEST_CONNECT: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_CONNECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_CONNECT: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_CONNECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_LOGIN: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_LOGIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_LOGIN: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_LOGIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_CREATE_ACCOUNT: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_CREATE_ACCOUNT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_CREATE_ACCOUNT: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_CREATE_ACCOUNT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_LOGOUT: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_LOGOUT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_LOGOUT: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_LOGOUT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageContent(
        verifier,  values->Get(i), types->GetEnum<MessageContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const protocol::MESSAGE_WRAPPER *GetMESSAGE_WRAPPER(const void *buf) {
  return ::flatbuffers::GetRoot<protocol::MESSAGE_WRAPPER>(buf);
}

inline const protocol::MESSAGE_WRAPPER *GetSizePrefixedMESSAGE_WRAPPER(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<protocol::MESSAGE_WRAPPER>(buf);
}

inline bool VerifyMESSAGE_WRAPPERBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<protocol::MESSAGE_WRAPPER>(nullptr);
}

inline bool VerifySizePrefixedMESSAGE_WRAPPERBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<protocol::MESSAGE_WRAPPER>(nullptr);
}

inline void FinishMESSAGE_WRAPPERBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::MESSAGE_WRAPPER> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMESSAGE_WRAPPERBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::MESSAGE_WRAPPER> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_MESSAGEWRAPPER_PROTOCOL_H_
